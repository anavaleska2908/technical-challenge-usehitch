import { signIn, signOut, useSession } from "next-auth/react";
import { api, type RouterOutputs } from "~/utils/api";
// import styles from "./index.module.css";
import { Header } from "~/components/Header";
// import TodoEditor from "~/components/TodoEditor";
import PostTemporary from "~/components/PostTemporaty";
// import TodoList from "~/components/TodoList";
import { Button, Container, Grid, Typography } from "@mui/material";
import { useState, useEffect, SetStateAction, useCallback } from "react";
import { TodoListData } from "~/lib/schemas/TodoSchema";
import { TodoCreateSchema, TodoCreateData } from "~/lib/schemas/TodoCreateSchema";
import Link from "next/link";
import { getServerSession } from "next-auth";
import { authOptions } from "~/server/auth";
import { useRouter } from "next/router";




export default function Home() {
  const { data: sessionData } = useSession();
  const router = useRouter();

  const onSubmit = useCallback(async () => {
    await signIn("google", {callbackUrl: "/dashboard"})
  }, [])

  if (sessionData?.user) {
    router.push("/dashboard")
  }


  return (
    <>
      {sessionData ? (
        <Header />
      ) : (
        <Header />
      )}
      <Container
        component="main"
        maxWidth="xs"
        sx={{
          marginTop: 4,
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          flexDirection: "column"
        }}>

        <Typography variant="h2">
          Create your own To-Dos
        </Typography>
        {/* <Link href={"/dashboard"}> */}
          <Button
            variant="contained"
            color="primary"
            onClick={() => onSubmit()}
          >
            Sign In
          </Button>
        {/* </Link> */}

      </Container>

      {/* <main>
        <div>
          {/* {sessionData && (
            <div>
              <h3>Todos</h3> */}
              {/* <Todos /> */}
              {/* <TodoEditor userId={sessionData.user.id}/> */}
              {/* {<PostTemporary />} */}
            {/* </div>
          )} */}

        {/* </div>
        <div> */}
          {/* <div className={styles.authContainer}> */}
            {/* <p className={styles.showcaseText}>
              {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
            </p>
            <button
              className={styles.loginButton}
              onClick={sessionData ? () => void signOut() : () => void signIn()}
            >
              {sessionData ? "Sign out" : "Sign in"}
            </button> */}
          {/* </div> */}
        {/* </div> */}
      {/* </main> */}







      {/* Old stuff */}
      {/* <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className={styles.container}>
          <h1 className={styles.title}>
            Create <span className={styles.pinkSpan}>T3</span> App
          </h1>
          <div className={styles.cardRow}>
            <Link
              className={styles.card}
              href="https://create.t3.gg/en/usage/first-steps"
              target="_blank"
            >
              <h3 className={styles.cardTitle}>First Steps →</h3>
              <div className={styles.cardText}>
                Just the basics - Everything you need to know to set up your
                database and authentication.
              </div>
            </Link>
            <Link
              className={styles.card}
              href="https://create.t3.gg/en/introduction"
              target="_blank"
            >
              <h3 className={styles.cardTitle}>Documentation →</h3>
              <div className={styles.cardText}>
                Learn more about Create T3 App, the libraries it uses, and how
                to deploy it.
              </div>
            </Link>
          </div>
          <div className={styles.showcaseContainer}>
            <p className={styles.showcaseText}>
              {hello.data ? hello.data.greeting : "Loading tRPC query..."}
            </p>
            <AuthShowcase />
          </div>
        </div>
      </main> */}
    </>
  );
}

// const Content: React.FC = () => {


//   return (
//     <div>
//       <div></div>
//       <div></div>
//     </div>
//   )
// }

// function AuthShowcase() {
//   const { data: sessionData } = useSession();

//   const { data: secretMessage } = api.post.getSecretMessage.useQuery(
//     undefined, // no input
//     { enabled: sessionData?.user !== undefined }
//   );

//   return (
//     <div className={styles.authContainer}>
//       <p className={styles.showcaseText}>
//         {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
//         {secretMessage && <span> - {secretMessage}</span>}
//       </p>
//       <button
//         className={styles.loginButton}
//         onClick={sessionData ? () => void signOut() : () => void signIn()}
//       >
//         {sessionData ? "Sign out" : "Sign in"}
//       </button>
//     </div>
//   );
// }
